name: Deploy gringa
on:
  push:
    branches: [gringa]

env:                       # opcional (torna IMAGE_NAME vis√≠vel em todos os jobs)
  IMAGE_NAME: aidabusiness/aida-repo

jobs:
  # ---------- JOB 1: build & push ----------
  build:
    name: Build e Push Imagem Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Ler ambiente e vers√£o
        id: read_version
        run: |
          ENV=$(sed -n '1p' VERSION)
          VER=$(sed -n '2p' VERSION)
          IMAGE_TAG="aidabusiness/aida-repo:$ENV-$VER"
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "VER=$VER" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV


      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.ENV }}-${{ env.VER }}

      - name: Definir tag completa para o pr√≥ximo job
        id: tag
        run: |
          echo "full_tag=${{ env.IMAGE_NAME }}:${{ steps.read_version.outputs.env }}-${{ steps.read_version.outputs.version }}" >> $GITHUB_OUTPUT

  # ---------- JOB 2: deploy ----------
  deploy:
    name: Deploy na VPS
    needs: build
    runs-on: ubuntu-latest     # s√≥ para executar o passo SSH
    
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Ler ambiente e vers√£o
        run: |
          ENV=$(sed -n '1p' VERSION)
          VER=$(sed -n '2p' VERSION)
          echo "ENV=$ENV" >> $GITHUB_ENV
          echo "VER=$VER" >> $GITHUB_ENV

      - name: Pull + restart via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:                              # ‚Üê 1) valores ficam dispon√≠veis no runner
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN:    ${{ secrets.DOCKERHUB_TOKEN }}

        with:
          host:      ${{ secrets.SSH_HOST }}
          username:  ${{ secrets.SSH_USER }}
          key:       ${{ secrets.SSH_KEY }}

          envs: ENV,VER,DOCKERHUB_USERNAME,DOCKERHUB_TOKEN

          script: |
            set -e

            APP_DIR="/srv/erp/gringa"
            CONTAINER_NAME="aida-app-gringa"
            IMAGE_NAME="aidabusiness/aida-repo"
            IMAGE_TAG="$IMAGE_NAME:$ENV-$VER"


            echo "‚è©  Criando pasta ${APP_DIR} (se n√£o existir)..."
            mkdir -p "${APP_DIR}"
            cd "${APP_DIR}"

            echo "‚è©  Autenticando no Docker Hub..."
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin


            echo "‚è©  Pull da imagem ${IMAGE_TAG}..."
            docker pull "${IMAGE_TAG}"

            echo "‚è©  Parando container antigo (se existir)..."
            docker stop "${CONTAINER_NAME}" 2>/dev/null || true
            docker rm   "${CONTAINER_NAME}" 2>/dev/null || true

            echo "‚è©  Subindo novo container..."
            docker run -d \
              --name "${CONTAINER_NAME}" \
              --restart unless-stopped \
              --env-file ./.env \
              -p 8085:80 \
              "${IMAGE_TAG}"

            echo "‚úÖ  Deploy conclu√≠do!"

            echo "üßπ Limpando imagens Docker antigas n√£o utilizadas..."
            docker image prune -af --filter "until=24h"
